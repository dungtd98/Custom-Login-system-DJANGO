# Generated by Django 4.0.1 on 2022-06-03 04:06

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUserModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('userID', models.CharField(error_messages={'unique': 'userID already existed.'}, help_text='Required, 20 characters or fewer', max_length=20, unique=True, verbose_name='Mã nhân viên: ')),
                ('userFullname', models.CharField(max_length=200, verbose_name='Họ và tên')),
                ('userRole', models.CharField(choices=[('EMPLOYEE', 'Nhân viên'), ('MANAGER', 'Quản lí')], default='EMPLOYEE', max_length=30, verbose_name='Chức vụ')),
                ('is_staff', models.BooleanField(default=False, help_text='Designate whether this user can log into admin site ', verbose_name='staff_status')),
                ('is_active', models.BooleanField(default=True, help_text='Designate whether this user should be treated as active.Unselected this instead of deleted account', verbose_name='active')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('workingStatus', models.CharField(choices=[('ONDUTY', 'bình thường'), ('ANUAL_LEAVE', 'phép năm'), ('NOREASON_LEAVE', 'nghỉ tự do'), ('SICK_LEAVE', 'phép bệnh'), ('PRIVATE_LEAVE', 'Phép riêng')], default='ONDUTY', max_length=30, verbose_name='Điểm danh')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
